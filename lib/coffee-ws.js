// Generated by CoffeeScript 1.6.2
(function() {
  var Client, EventEmitter, Server, WebSocketServer, async, pack, unpack,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  WebSocketServer = require('ws').Server;

  EventEmitter = require('events').EventEmitter;

  async = require('async');

  pack = function(data) {
    return JSON.stringify(data);
  };

  unpack = function(data) {
    var err;

    try {
      return JSON.parse(data);
    } catch (_error) {
      err = _error;
      return null;
    }
  };

  Server = (function(_super) {
    __extends(Server, _super);

    function Server(options) {
      var _this = this;

      this.clients = [];
      this.wss = new WebSocketServer(options);
      this.wss.on('connection', function(ws) {
        var client;

        client = new Client(ws);
        ws.on('close', function() {
          return _this.clients.splice(_this.clients.indexOf(client, 1));
        });
        _this.clients.push(client);
        return _this.emit.call(_this, 'connection', client);
      });
    }

    return Server;

  })(EventEmitter);

  Client = (function(_super) {
    __extends(Client, _super);

    function Client(client) {
      var _this = this;

      this.middleware = {};
      this.ws = client;
      this.ws.on('message', function(message) {
        return _this.handleMessage(message);
      });
    }

    Client.prototype.handleMessage = function(message) {
      var callback, data, middleware, task, tasks,
        _this = this;

      data = unpack(message);
      middleware = this.middleware[data.e];
      if (middleware) {
        callback = middleware[middleware.length - 1];
        tasks = middleware.slice(0, middleware.length - 1);
        return async.series((function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = tasks.length; _i < _len; _i++) {
            task = tasks[_i];
            _results.push(task.bind(this));
          }
          return _results;
        }).call(this), function(err, res) {
          if (!err) {
            return callback.call(_this, null, data.d);
          } else {
            return callback.call(_this, err);
          }
        });
      }
    };

    Client.prototype.emit = function(event, data) {
      var res;

      res = pack({
        e: event,
        d: data
      });
      if (this.ws.readyState === 1) {
        return this.ws.send(res);
      }
    };

    Client.prototype.on = function() {
      var event, middleware;

      event = arguments[0], middleware = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.middleware[event] = middleware;
      return this;
    };

    return Client;

  })(Server);

  module.exports = Server;

}).call(this);
